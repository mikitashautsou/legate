// import { render_graph } from "./graph"
// import * as nor_executor from "./nor-executor-matrix"

// import { forceStop } from "./force-stop";
// import { render_graph } from "./graph";
// import { error, log } from "./logger";
// import { search } from "./min_change_searcher";
// import { norExecutor } from "./nor-executor-oop";


// window.stop = () => {
//     forceStop()
// }
// /**
// Ix2, Ox1, NORx2
// Producers: Ix2, NORx2 => I + NOR
// Consumers: Ox1, NOR_Lx2, NOR_Rx2 => O + NOR * 2
//  */
// const CONNECTION_MATRIX = [

//     [0, 0, 0],
//     []
// ]
// console.log('ok2')
// // render_graph([
// //     [0, 1, 0],
// //     [0, 0, 1],
// //     [1, 0, 0],
// // ], 2, 1, 1)


// nor_executor.init_executor(2, 1, 1)
// nor_executor.update_connection(0, 1, 1)
// nor_executor.update_connection(1, 2, 1)
// nor_executor.update_connection(2, 0, 0)
// nor_executor.execute([0, 1])


// const INPUTS = 2
// const OUTPUTS = 1
// const NORS = 1
// const matrix = [
//     [0, 1, 1],
//     [0, 0, 0],
//     [1, 0, 0]
// ]
// norExecutor.init(2, 1, 1)
// norExecutor.configure(matrix)
// console.log(norExecutor.execute([0, 1]))
// norExecutor.reset()
// console.log(norExecutor.execute([1, 0]))
// const controls = render_graph(matrix, INPUTS, OUTPUTS, NORS)

// setTimeout(() => {
//     console.log(norExecutor.execute([0, 0], {
//         onNodeValue: (node_index, node_value) => {
//             controls.updateNodeValue(node_index, node_value)
//             alert('ok')
//         },
//         onEdgeValue: (...data) => {

//             console.log('edge update', data)
//             alert('ok')
//         },

//     }))

// }, 1000)


// const main = async () => {
//     log('STARTED')
//     const NORS = 4
//     const { best_config, iterations } = await search({
//         inputs: 8,
//         outputs: 2,
//         nors: NORS,
//         fitnessFunc: async (execute) => {
//             let score = 0

//             let hasNearLeftKiller = 0
//             let hasFarLeftKiller = 0
//             let hasNearRightKiller = 0
//             let hasFarRightKiller = 0


//             let hasNearLeftApple = 0
//             let hasFarLeftApple = 0
//             let hasNearRightApple = 0
//             let hasFarRightApple = 0

//             let cycles = 0
//             while (cycles < 100) {
//                 cycles++
//                 let actions;

//                 try {
//                     actions = execute([hasFarLeftApple, hasNearLeftApple, hasNearRightApple, hasFarRightApple,
//                         hasFarLeftKiller, hasNearLeftKiller, hasNearRightKiller, hasFarRightKiller])
//                 } catch (e) {
//                 }
//                 actions[0] |= 0
//                 actions[1] |= 0

//                 if (actions[0] === actions[1]) {
//                     if (hasNearLeftKiller) {
//                         score -= 10
//                     }
//                     if (hasNearRightKiller) {
//                         score -= 10
//                     }
//                     hasNearLeftKiller = hasFarLeftKiller
//                     hasNearRightKiller = hasFarRightKiller
//                     hasFarLeftKiller = Math.random() > 0.5 ? 1 : 0
//                     hasFarRightKiller = Math.random() > 0.5 ? 1 : 0
//                     continue
//                 }
//                 if (actions[0] === 1 && actions[1] === 0) {
//                     if (hasNearLeftApple) {
//                         score += 1
//                     }
//                     hasNearLeftApple = hasFarLeftApple
//                     hasFarLeftApple = Math.random() > 0.1 ? 1 : 0

//                     hasFarRightApple = hasNearRightApple
//                     hasNearRightApple = 0
//                 }
//                 if (actions[0] === 0 && actions[1] === 1) {
//                     if (hasNearRightApple) {
//                         score += 1
//                     }
//                     hasNearRightApple = hasFarRightApple
//                     hasFarRightApple = Math.random() > 0.1 ? 1 : 0
//                     hasFarLeftApple = hasNearLeftApple
//                     hasNearLeftApple = 0
//                 }



//                 if (actions[0] === 1 && actions[1] === 0) {
//                     if (hasNearLeftKiller) {
//                         score -= 10
//                     }
//                     hasNearLeftKiller = hasFarLeftKiller
//                     hasFarLeftKiller = Math.random() > 0.5 ? 1 : 0
//                     hasFarRightKiller = hasNearRightKiller
//                     hasNearRightKiller = 0
//                 }
//                 if (actions[0] === 0 && actions[1] === 1) {
//                     if (hasNearRightKiller) {
//                         score -= 10
//                     }
//                     hasNearRightKiller = hasFarRightKiller
//                     hasFarRightKiller = Math.random() > 0.5 ? 1 : 0

//                     hasFarLeftKiller = hasNearLeftKiller
//                     hasNearLeftKiller = 0

//                 }
//             }

//             return score
//         },
//         // stopCondition: ({ fitness }) => fitness > 3,
//         // maxTime: 1_000 * 60 * 10,
//         // maxTime: 1_000 * 5,
//     })

//     render_graph(best_config, 8, 2, NORS)


//     norExecutor.configure(best_config)
//     norExecutor.reset()
//     function test(inputs) {
//         return norExecutor.execute(inputs)
//     }
//     window.ask = test
// }




// main().then(() => {
//     log('DONE')
// }).catch(e => {
//     error(e)
// })




// console.log('ready --> test([?]) ')

// render_graph(best_config, 1, 1, NORS)


// const { best_config, iterations } = search({
//     inputs: 2,
//     outputs: 1,
//     nors: 3,
//     fitnessFunc: (execute) => {


//         let score = 0
//         if (execute([0, 0])[0] === 0) {
//             score += 1
//         }
//         if (execute([1, 0])[0] === 0) {
//             score += 1
//         }
//         if (execute([0, 1])[0] === 0) {
//             score += 1
//         }
//         if (execute([1, 1])[0] === 1) {
//             score += 1
//         }
//         return score
//     },
//     // stopCondition: ({ fitness }) => fitness > 3,
//     maxTime: 50_000,
// })

// console.log(best_config);




// find reusable components!
// develop another learning algorithm!(build graph from scratch, amount of elements = tempreature)


